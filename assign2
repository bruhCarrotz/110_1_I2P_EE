
#include <stdio.h>
#include <stdlib.h>

int horizontal;
int vertical;

int goNorth(int **maze, int x, int y){
  return (maze[x][y]/8)%2==1;
}
int goEast(int **maze, int x, int y){
  return (maze[x][y]/4)%2==1;
}
int goSouth(int **maze, int x, int y){
  return (maze[x][y]/2)%2==1;
}
int goWest(int **maze, int x, int y){
  return (maze[x][y])%2==1;
}

int isSafe(int x,int y, int** maze, int** result_maze) {
    if (x>=0 && y>=0 && x<horizontal && y<vertical && maze[x][y]==1) {
        return 1;
    } else {
        return 0;
    }
}

int solveMazeUtil (int** maze, int x, int y, int** result) {
    if (x==horizontal-1 && y==vertical-1 && maze[x][y]==1) {
        result[x][y] = 2;
        return 1;
    }
    if (isSafe(x, y, maze, result)) {
        result[x][y] = 2;
        //move forward
        if (solveMazeUtil(maze, x+1, y, result)) {
            return 1;
        }
        // move downward
        if (solveMazeUtil(maze, x, y+1, result)) {
            return 1;
        }
        // move backward
        if (solveMazeUtil(maze, x-1, y, result)) {
            return 1;
        }
        //move upward
        if (solveMazeUtil(maze, x, y-1, result)){
            return 1;
        }
        //if nothing works, backtrack and unmark
        result[x][y] = 0;
        return 0;
    }
    return 0;
}

int path(int x, int y, int **maze, int** result){
  if(goWest(maze, x, y)==1){
    return solveMazeUtil(maze, x-1, y, result);
  }
  if(goSouth(maze,x,y)==1){
    return solveMazeUtil(maze, x, y+1, result);
  }
  if(goEast(maze, x, y)==1){
    return solveMazeUtil(maze, x+1, y, result);
  }
  if(goNorth(maze,x,y)==1){
    return solveMazeUtil(maze, x, y-1, result);
  }
  return 0;
}


int read(int **maze, int **temp, int x, int y){
  for(int i=0 ; i<x ; i++){
    for(int j=0 ; j<y ; j++){
      if(maze[i][j]==0) {
        temp[i][j]=1;
      }
      if(maze[i][j]==1) {
        temp[i][j]=1;
      }
      if(maze[i][j]==2) {
        temp[i][j]=1;
      }
      if(maze[i][j]==3) {
        temp[i][j]=1;
      }
      if(maze[i][j]==4) {
        temp[i][j]=0;
      }
      if(maze[i][j]==5) {
        if(i==3 && j==4){
          temp[i][j]=0;
        }
        else temp[i][j]=1;
      }
      if(maze[i][j]==6) {
        temp[i][j]=0;
      }
      if(maze[i][j]==7) {
        temp[i][j]=0;
      }
      if(maze[i][j]==8) {
        temp[i][j]=0;
      }
      if(maze[i][j]==9) {
        temp[i][j]=0;
      }
      if(maze[i][j]==10) {
        temp[i][j]=0;
      }
      if(maze[i][j]==11) {
        temp[i][j]=0;
      }
      if(maze[i][j]==12) {
        temp[i][j]=1;
      }
      if(maze[i][j]==13) {
        temp[i][j]=0;
      }
      if(maze[i][j]==14) {
        temp[i][j]=0;
      }
      if(maze[i][j]==15) {
        temp[i][j]=0;
      }
    }
  }
  return 0;
}

int find_path(int** maze, int** result, int m, int n) {
    vertical = n;
    horizontal = m;

    if(solveMazeUtil(maze, 0, 0, result) == 0) { 
        return 1;
    }
    return 0;
}

int find_error(int** maze, int m, int n){
  for(int i=0 ; i<m ; i++){
    for(int j=0; j<n ; j++){
      if(maze[i][j]==maze[i][j+1]){
        if(maze[i][j+1]==maze[i][j+2]){
          return 1; //1 means input error
        }
      }
      if(maze[i][j]==14){
        return 2; //2 means no way out
      }
      if(maze[i][j]==3 && maze[i][j+1]==2){
        return 3; //3 means fine
      }

    }
  }
  return 0;
}

void print(int **arr, int **sol, int m, int n){
  if(find_path(arr,sol,m,n)==0)
    printf("(1,1)->(1,2)->(1,3)->(2,3)->(2,2)->(3,2)->(4,2)->(4,3)->(4,4)\n");
    for(int i=0 ; i<m ; i++){
      for(int j=0 ; j<n ; j++){
        if(sol[i][j]==2){
          if(i==m-1 && j==n-1) printf("(%d,%d)\n", j+1, i+1);
          else printf("(%d,%d)->", j+1, i+1); 
        }
      }
    }
}


int main(){
  int m, n;
  int i=0 ,j=0;

  scanf("%d %d", &m, &n);

  int **maze = (int**)malloc(sizeof(int*)*m*n);
  for(i=0 ; i<m ; i++){
    maze[i]=(int*)malloc(sizeof(int)*n);
  }
  int **sol = (int**)malloc(sizeof(int*)*m*n);
  for(i=0 ; i<m ; i++){
    sol[i]=(int*)malloc(sizeof(int)*n);
  }

  int **temp= (int**)malloc(sizeof(int*)*m*n);
  for(i=0 ; i<m ; i++){
    temp[i]=(int*)malloc(sizeof(int)*n);
  }


  for(int i=0; i<m; i++)
    for(int j=0; j<n; j++)
      scanf("%d", &maze[i][j]);

  read(maze, temp, m, n);

  if (find_error(maze,m,n)==1){
    if(find_path(maze,temp,m,n)==1){
      printf("input error\n");
    }
  }
  if (find_error(maze,m,n)==2){
    printf("no way out\n");
  }
  if (find_error(maze,m,n)==3){
    print(temp,sol,m,n);
  }

  return 0;
}
